# FastAPI AI Code Assistant - Environment Configuration Example
# Copy this file to .env and update the values according to your setup

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================
APP_NAME="AI Code Assistant API"
APP_DESCRIPTION="FastAPI-based AI Code Assistant with OpenAI integration"
APP_VERSION="1.0.0"
LICENSE="MIT"
CONTACT_NAME="Your Name"
CONTACT_EMAIL="your.email@example.com"

# =============================================================================
# SECURITY & AUTHENTICATION
# =============================================================================
# Generate a secure secret key: openssl rand -hex 32
SECRET_KEY="your-super-secret-key-here-change-this-in-production"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# Choose one database configuration based on your setup

# PostgreSQL (Recommended for production)
POSTGRES_USER="postgres"
POSTGRES_PASSWORD="your-postgres-password"
POSTGRES_SERVER="localhost"
POSTGRES_PORT=5432
POSTGRES_DB="ai_assistant_db"
POSTGRES_SYNC_PREFIX="postgresql://"
POSTGRES_ASYNC_PREFIX="postgresql+asyncpg://"
# Alternative: Use full connection URL
# POSTGRES_URL="postgresql+asyncpg://user:password@localhost:5432/dbname"

# MySQL (Alternative)
# MYSQL_USER="username"
# MYSQL_PASSWORD="password"
# MYSQL_SERVER="localhost"
# MYSQL_PORT=3306
# MYSQL_DB="ai_assistant_db"
# MYSQL_SYNC_PREFIX="mysql://"
# MYSQL_ASYNC_PREFIX="mysql+aiomysql://"
# MYSQL_URL="mysql+aiomysql://user:password@localhost:3306/dbname"

# SQLite (Development only)
# SQLITE_URI="./ai_assistant.db"
# SQLITE_SYNC_PREFIX="sqlite:///"
# SQLITE_ASYNC_PREFIX="sqlite+aiosqlite:///"

# =============================================================================
# AI SERVICE CONFIGURATION (OpenAI)
# =============================================================================
# OpenAI API Key - Get from https://platform.openai.com/api-keys
OPENAI_API_KEY="sk-your-openai-api-key-here"

# AI Model Configuration
OPENAI_MODEL="gpt-3.5-turbo"  # Options: gpt-3.5-turbo, gpt-4, gpt-4-turbo-preview
MAX_TOKENS=1000               # Maximum tokens per AI request (adjust based on model)
TEMPERATURE=0.7               # Creativity level (0.0-2.0, lower = more deterministic)
AI_TIMEOUT=30                 # Request timeout in seconds

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================
# Redis is used for caching, rate limiting, and background job queues

# Redis Cache (for AI response caching)
REDIS_CACHE_HOST="localhost"
REDIS_CACHE_PORT=6379

# Redis Queue (for background jobs)
REDIS_QUEUE_HOST="localhost"
REDIS_QUEUE_PORT=6379

# Redis Rate Limiter (for API rate limiting)
REDIS_RATE_LIMIT_HOST="localhost"
REDIS_RATE_LIMIT_PORT=6379

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================
# Default rate limits (can be overridden per user tier)
DEFAULT_RATE_LIMIT_LIMIT=10   # Number of requests
DEFAULT_RATE_LIMIT_PERIOD=3600 # Time period in seconds (3600 = 1 hour)

# =============================================================================
# CACHING CONFIGURATION
# =============================================================================
# Client-side cache settings
CLIENT_CACHE_MAX_AGE=60       # Cache max age in seconds

# =============================================================================
# ADMIN USER CONFIGURATION
# =============================================================================
# Default admin user created on first startup
ADMIN_NAME="Admin User"
ADMIN_EMAIL="admin@example.com"
ADMIN_USERNAME="admin"
ADMIN_PASSWORD="!Ch4ng3Th1sP4ssW0rd!"  # CHANGE THIS IN PRODUCTION!

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================
# Environment: local, staging, production
ENVIRONMENT="local"

# =============================================================================
# ADDITIONAL NOTES
# =============================================================================
# 
# AI Service Setup:
# 1. Sign up for OpenAI API access at https://platform.openai.com/
# 2. Create an API key and set it in OPENAI_API_KEY
# 3. Choose appropriate model based on your needs and budget:
#    - gpt-3.5-turbo: Fast, cost-effective, good for most tasks
#    - gpt-4: More capable, higher cost, better for complex tasks
#    - gpt-4-turbo-preview: Latest model with improved performance
#
# Rate Limiting:
# - AI endpoints have different rate limits:
#   - /ai/generate-code: 10 requests/hour
#   - /ai/explain-code: 20 requests/hour  
#   - /ai/review-code: 15 requests/hour
#   - /ai/health: 100 requests/hour
#   - /ai/context: 50 requests/hour
#
# Caching:
# - Code explanations are cached for 1 hour
# - Code reviews are cached for 30 minutes
# - Health checks are cached for 5 minutes
# - Context info is cached for 10 minutes
#
# Security:
# - Always use strong, unique passwords in production
# - Keep your OpenAI API key secure and never commit it to version control
# - Use environment-specific configuration files
# - Enable HTTPS in production
#
# Database:
# - PostgreSQL is recommended for production environments
# - SQLite is suitable for development and testing only
# - Ensure your database supports async operations
#
# Redis:
# - Redis is required for caching and rate limiting
# - You can use the same Redis instance for all services
# - Consider Redis clustering for high availability in production